# Strandly Cursor Rules

## 🎯 Project Overview
Strandly is a premium Afro hair styling platform connecting clients with professional stylists across Europe. Built with React + Vite, TypeScript, TailwindCSS, and Shadcn UI.

## 🎨 Design System Rules

### Color Palette
- **Primary Background**: `#e7cfb1` (warm beige) - use `bg-background` or `bg-[#e7cfb1]`
- **Primary Text**: `#1a0f0a` (cocoa brown) - use `text-foreground` or `text-[#1a0f0a]`
- **Accent Colors**: Use `#6B3F1D` (Strandly brown) for highlights and CTAs
- **Avoid**: White backgrounds, use warm beige instead
- **Gradients**: Use `bg-gradient-warm` for hero elements

### Typography
- **Headers**: Always use `font-display` (Prata serif) for h1-h6
- **Body Text**: Use `font-body` (Open Sans) for paragraphs and descriptions
- **Hero Titles**: Use `text-5xl md:text-6xl lg:text-8xl` with `font-display`
- **Section Titles**: Use `text-5xl sm:text-6xl` with `font-display`
- **Body Text**: Use `text-base md:text-2xl` with `font-body`

### Layout Patterns
- **Hero Sections**: Two-column grid with image left, content right
- **Process Steps**: Three-column grid with connecting dashed line
- **Dual Content**: Two-column layout with mobile mockup
- **Mobile-First**: Always start with mobile layout, then add responsive breakpoints

## 🧩 Component Rules

### Button Variants
- **Hero**: `variant="hero"` - Primary CTA buttons
- **Hero Outline**: `variant="hero-outline"` - Secondary CTA buttons
- **Primary**: `variant="primary"` - Standard primary buttons
- **Secondary**: `variant="secondary"` - Standard secondary buttons
- **Sizes**: Use `size="xl"` for hero CTAs, `size="lg"` for important actions

### Card Components
- **Background**: Always use `bg-background` or `bg-[#e7cfb1]`
- **Shadows**: Use `shadow-warm` or `shadow-elegant` for depth
- **Borders**: Use `border-[#6B3F1D]/30` for subtle borders
- **Padding**: Use `p-6` or `p-8` for standard cards

### Form Elements
- **Inputs**: Use `bg-[#e7cfb1]` background with `border-[#6B3F1D]/30`
- **Focus States**: Use `focus:border-[#6B3F1D]` and `focus:ring-[#6B3F1D]`
- **Labels**: Use `text-foreground` with proper contrast
- **Error States**: Use `text-destructive` for error messages

## 📱 Responsive Design Rules

### Breakpoints (Tailwind Defaults)
- **Mobile**: `0px - 639px` (base) - Single column, stacked layout
- **Small**: `640px - 767px` (sm:) - Small tablet adjustments
- **Medium**: `768px - 1023px` (md:) - Tablet layouts
- **Large**: `1024px - 1279px` (lg:) - Desktop layouts
- **Extra Large**: `1280px+` (xl:) - Large desktop layouts

### Mobile-First Approach (MANDATORY)
- **ALWAYS** start with mobile layout in base classes
- **ALWAYS** add responsive prefixes: `sm:`, `md:`, `lg:`, `xl:`
- **NEVER** use desktop-first approach
- **ALWAYS** test on mobile devices first

### Responsive Typography Rules
```css
/* Hero Titles */
text-4xl sm:text-5xl md:text-6xl lg:text-7xl xl:text-8xl

/* Section Titles */
text-3xl sm:text-4xl md:text-5xl lg:text-6xl

/* Body Text */
text-sm sm:text-base md:text-lg lg:text-xl

/* Small Text */
text-xs sm:text-sm md:text-base
```

### Responsive Spacing Rules
```css
/* Section Padding */
py-8 sm:py-12 md:py-16 lg:py-20 xl:py-24

/* Container Padding */
px-4 sm:px-6 md:px-8 lg:px-12 xl:px-16

/* Content Spacing */
space-y-4 sm:space-y-6 md:space-y-8 lg:space-y-10

/* Card Padding */
p-4 sm:p-6 md:p-8 lg:p-10
```

### Responsive Grid Systems
```css
/* Hero Sections */
grid grid-cols-1 lg:grid-cols-2

/* Process Steps */
grid grid-cols-1 md:grid-cols-3 gap-y-8 md:gap-y-0

/* Product Grids */
grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4

/* Content Sections */
max-w-4xl sm:max-w-5xl md:max-w-6xl lg:max-w-7xl xl:max-w-8xl mx-auto
```

### Responsive Image Rules
```css
/* Hero Images */
w-full h-64 sm:h-80 md:h-96 lg:h-[500px] xl:h-[600px]

/* Card Images */
w-full h-48 sm:h-56 md:h-64 lg:h-72

/* Avatar Images */
w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 lg:w-16 lg:h-16
```

### Responsive Button Rules
```css
/* Button Sizes */
text-sm sm:text-base md:text-lg px-3 py-2 sm:px-4 sm:py-2 md:px-6 md:py-3

/* Button Groups */
flex-col sm:flex-row gap-2 sm:gap-4

/* Full Width on Mobile */
w-full sm:w-auto
```

### Responsive Form Rules
```css
/* Input Fields */
w-full px-3 py-2 sm:px-4 sm:py-3 md:px-6 md:py-4

/* Form Groups */
space-y-4 sm:space-y-6

/* Form Layouts */
grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6
```

### Responsive Navigation Rules
```css
/* Mobile Navigation */
hidden lg:flex (desktop nav)
flex lg:hidden (mobile nav)

/* Navigation Items */
text-sm sm:text-base md:text-lg

/* Navigation Spacing */
space-y-2 sm:space-y-0 sm:space-x-4 lg:space-x-6
```

### Responsive Card Rules
```css
/* Card Layouts */
grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 lg:gap-8

/* Card Content */
p-4 sm:p-6 md:p-8

/* Card Images */
h-48 sm:h-56 md:h-64 lg:h-72
```

### Responsive Modal/Dialog Rules
```css
/* Modal Sizes */
w-full sm:w-11/12 md:w-3/4 lg:w-2/3 xl:w-1/2

/* Modal Padding */
p-4 sm:p-6 md:p-8

/* Modal Spacing */
space-y-4 sm:space-y-6
```

### Responsive Text Rules
```css
/* Line Height */
leading-tight sm:leading-snug md:leading-normal lg:leading-relaxed

/* Text Alignment */
text-center sm:text-left (mobile center, desktop left)
text-left sm:text-center (mobile left, desktop center)

/* Text Truncation */
truncate sm:whitespace-normal (mobile truncate, desktop wrap)
```

### Responsive Visibility Rules
```css
/* Show/Hide Elements */
hidden sm:block (hide on mobile, show on tablet+)
block sm:hidden (show on mobile, hide on tablet+)
hidden md:block (hide on mobile/tablet, show on desktop+)
```

### Responsive Touch Targets
- **Minimum Size**: 44px × 44px for all interactive elements
- **Button Padding**: `px-4 py-3` minimum on mobile
- **Link Spacing**: `py-2` minimum for text links
- **Icon Buttons**: `w-10 h-10` minimum size

### Responsive Testing Checklist
- [ ] Test on mobile (320px - 640px)
- [ ] Test on tablet (768px - 1024px)
- [ ] Test on desktop (1024px+)
- [ ] Test on large desktop (1280px+)
- [ ] Verify touch targets are 44px+
- [ ] Check text readability at all sizes
- [ ] Ensure images scale properly
- [ ] Test navigation on all devices
- [ ] Verify forms work on mobile
- [ ] Check modal/dialog responsiveness

### Responsive Performance Rules
- Use `loading="lazy"` for below-the-fold images
- Implement responsive images with `srcset`
- Use `object-fit: cover` for consistent image scaling
- Optimize images for different screen densities
- Use CSS `clamp()` for fluid typography when appropriate

### Responsive Accessibility Rules
- Ensure 4.5:1 contrast ratio at all breakpoints
- Test with screen readers on mobile and desktop
- Verify keyboard navigation works on all devices
- Ensure focus indicators are visible on all screen sizes
- Test with zoom up to 200% on all breakpoints

## 🎨 Visual Hierarchy Rules

### Spacing
- **Section Padding**: `py-16 sm:py-20 md:py-24` for main sections
- **Content Spacing**: `space-y-8` for vertical rhythm
- **Card Spacing**: `p-6` or `p-8` for internal padding
- **Button Spacing**: `gap-4` for button groups

### Shadows and Depth
- **Soft Shadows**: `shadow-soft` for subtle elevation
- **Elegant Shadows**: `shadow-elegant` for cards and modals
- **Warm Shadows**: `shadow-warm` for hero elements
- **Drop Shadows**: `drop-shadow-elegant` for images

### Borders and Radius
- **Standard Radius**: `rounded-lg` (12px) for cards
- **Large Radius**: `rounded-xl` (16px) for hero elements
- **Full Radius**: `rounded-full` for badges and avatars
- **Borders**: Use `border-[#6B3F1D]/30` for subtle borders

## 🔧 Code Quality Rules

### TypeScript
- Always use explicit types for props and state
- Use interfaces for component props
- Prefer `React.FC<Props>` for component definitions
- Use proper event handler types

### React Patterns
- Use functional components with hooks
- Implement proper error boundaries
- Use React.memo for performance optimization
- Follow the single responsibility principle

### CSS Classes
- Use Tailwind utility classes over custom CSS
- Group related classes logically
- Use responsive prefixes consistently
- Avoid inline styles unless absolutely necessary

## 🌍 Internationalization Rules

### Translation Keys
- Use namespaced keys: `home.hero_title`, `booking.form.name`
- Keep keys descriptive and consistent
- Use interpolation for dynamic content: `"welcome_message": "Welcome, {name}!"`
- Always provide fallback text

### Content Structure
- Separate content from code
- Use `useTranslation()` hook for client components
- Use `getTranslations()` for server components
- Support multiple locales: en, de, fr

## 🧪 Testing Rules

### Component Testing
- Test all user interactions
- Test responsive behavior
- Test accessibility features
- Test error states and loading states

### Test Structure
- Use descriptive test names
- Group related tests with `describe`
- Use `data-testid` for reliable selectors
- Mock external dependencies

## 🚀 Performance Rules

### Image Optimization
- Use Next.js Image component when available
- Provide proper alt text for accessibility
- Use appropriate image sizes for different breakpoints
- Implement lazy loading for below-the-fold images

### Code Splitting
- Use dynamic imports for heavy components
- Implement proper loading states
- Optimize bundle size with tree shaking
- Use React.lazy for route-based splitting

## ♿ Accessibility Rules

### WCAG AA Compliance
- Ensure 4.5:1 contrast ratio for normal text
- Provide proper heading hierarchy (h1 > h2 > h3)
- Use semantic HTML elements
- Implement proper focus management

### Keyboard Navigation
- All interactive elements must be keyboard accessible
- Use proper tab order
- Provide visible focus indicators
- Implement skip links for main content

### Screen Reader Support
- Use proper ARIA labels
- Provide descriptive alt text for images
- Use semantic HTML elements
- Test with screen readers

## 📝 Content Rules

### Voice and Tone
- Warm and professional
- Inclusive and celebratory of Afro hair
- Clear and direct language
- Encouraging and supportive

### Content Guidelines
- Use active voice
- Keep sentences concise
- Use bullet points for lists
- Provide clear CTAs

## 🔄 State Management Rules

### Local State
- Use useState for simple component state
- Use useReducer for complex state logic
- Keep state as close to where it's used as possible
- Avoid prop drilling

### Global State
- Use React Context for theme and user state
- Use React Query for server state
- Implement proper error handling
- Use optimistic updates where appropriate

## 🎯 SEO Rules

### Meta Tags
- Use descriptive page titles
- Provide meta descriptions
- Use proper heading hierarchy
- Implement structured data

### Performance
- Optimize Core Web Vitals
- Use proper image formats
- Implement lazy loading
- Minimize JavaScript bundle size

## 🚨 Error Handling Rules

### User-Friendly Messages
- Avoid technical jargon
- Provide actionable error messages
- Offer recovery options
- Use consistent error styling

### Error States
- Implement proper loading states
- Show skeleton screens for content loading
- Provide retry mechanisms
- Log errors for debugging

## 📱 Mobile-Specific Rules

### Touch Interactions
- Ensure touch targets are at least 44px
- Use appropriate touch gestures
- Implement proper swipe interactions
- Test on real devices

### Mobile Layout
- Use single-column layouts on mobile
- Stack elements vertically
- Use full-width buttons
- Implement proper mobile navigation

## 🔑 Essential Development Guidelines

### Design System Tokens
- **ALWAYS** use centralized design tokens from `tailwind.config.js`
- **NEVER** hardcode colors - use `bg-beige`, `text-cocoa`, `border-gold`
- **ALWAYS** use semantic color names: `primary`, `secondary`, `accent`, `muted`
- **ALWAYS** use consistent spacing scale: `space-1` through `space-24`
- **ALWAYS** use consistent border radius: `rounded-sm`, `rounded-md`, `rounded-lg`, `rounded-xl`

### Content Model & API Integration
- **ALWAYS** define content models in Directus first
- **ALWAYS** use generated TypeScript types from Directus
- **ALWAYS** create custom hooks for data fetching: `useStylists()`, `useBookings()`, `useProducts()`
- **NEVER** fetch data directly in components - use hooks
- **ALWAYS** implement proper error handling for API calls

### Authentication & Roles
- **ALWAYS** implement role-based access control (RBAC)
- **ALWAYS** protect routes based on user roles
- **ALWAYS** show appropriate UI based on user permissions
- **ALWAYS** handle authentication states: loading, authenticated, unauthenticated

### State Management Rules
- **ALWAYS** use React Query for server state
- **ALWAYS** use React Context for global client state
- **NEVER** use prop drilling - use context or custom hooks
- **ALWAYS** implement optimistic updates for better UX
- **ALWAYS** cache data appropriately with React Query

### Error & Success Handling
- **ALWAYS** provide user feedback for every action
- **ALWAYS** use toast notifications for success/error messages
- **ALWAYS** implement proper error boundaries
- **ALWAYS** show loading states during async operations
- **NEVER** leave users guessing about what happened

### Testing Requirements
- **ALWAYS** write tests for user interactions
- **ALWAYS** test responsive behavior
- **ALWAYS** test accessibility features
- **ALWAYS** test error states and loading states
- **ALWAYS** use `data-testid` for reliable selectors

### Performance Optimization
- **ALWAYS** use `React.memo` for expensive components
- **ALWAYS** implement lazy loading for below-the-fold content
- **ALWAYS** optimize images with proper sizing
- **ALWAYS** use `useMemo` and `useCallback` for expensive calculations
- **ALWAYS** implement proper code splitting

### SEO & Analytics
- **ALWAYS** implement proper meta tags
- **ALWAYS** use semantic HTML elements
- **ALWAYS** implement structured data for services/products
- **ALWAYS** track user interactions with analytics
- **ALWAYS** optimize Core Web Vitals

### Content & Marketing
- **ALWAYS** support multilingual content
- **ALWAYS** implement proper content management
- **ALWAYS** use consistent content structure
- **ALWAYS** implement proper content validation
- **ALWAYS** support content preview and staging

### Development Workflow
- **ALWAYS** use TypeScript for type safety
- **ALWAYS** use ESLint and Prettier for code quality
- **ALWAYS** write meaningful commit messages
- **ALWAYS** create feature branches for new work
- **ALWAYS** test before merging to main

### Code Organization
- **ALWAYS** use atomic design principles
- **ALWAYS** keep components small and focused
- **ALWAYS** use proper file naming conventions
- **ALWAYS** organize imports logically
- **ALWAYS** use proper TypeScript interfaces

---

Follow these rules to maintain consistency, quality, and accessibility across the Strandly platform. Always prioritize user experience and mobile-first design.